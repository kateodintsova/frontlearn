// вложенное копирование
let user = {
    name: "Иван",
    sizes: {
        height: 182,
        width: 50
    }
};

let clone = Object.assign({}, user);

alert(user.sizes === clone.sizes); // true, один и тот же объект

// user и clone обращаются к одному sizes
user.sizes.width++;       // меняем свойство в одном объекте
alert(clone.sizes.width); // 51, видим результат в другом объекте


// Чтобы исправить это, мы должны в цикле клонирования делать проверку, не является ли значение user[key] объектом, 
// и если это так – скопировать и его структуру тоже. Это называется «глубокое клонирование».

// Мы можем реализовать глубокое клонирование, используя рекурсию. Или, чтобы не изобретать велосипед, 
// использовать готовую реализацию — метод _.cloneDeep(obj) из JavaScript-библиотеки lodash.